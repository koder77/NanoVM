    ston;

lab main;
    double m_e@main;
    push_d 2.7182818285, D0;
    pull_d D0, m_e@main;
    double m_log2e@main;
    push_d 1.4426950409, D1;
    pull_d D1, m_log2e@main;
    double m_log10e@main;
    push_d 0.4342944819, D2;
    pull_d D2, m_log10e@main;
    double m_ln2@main;
    push_d 0.6931471806, D3;
    pull_d D3, m_ln2@main;
    double m_ln10@main;
    push_d 2.3025850930, D4;
    pull_d D4, m_ln10@main;
    double m_pi@main;
    push_d 3.1415926536, D5;
    pull_d D5, m_pi@main;
    double m_pi_2@main;
    push_d 1.5707963268, D6;
    pull_d D6, m_pi_2@main;
    double m_pi_4@main;
    push_d 0.7853981634, D7;
    pull_d D7, m_pi_4@main;
    double m_1_pi@main;
    push_d 0.3183098862, D8;
    pull_d D8, m_1_pi@main;
    double m_2_pi@main;
    push_d 0.6366197724, D9;
    pull_d D9, m_2_pi@main;
    double m_2_sqrtpi@main;
    push_d 1.1283791671, D10;
    pull_d D10, m_2_sqrtpi@main;
    double m_sqrt2@main;
    push_d 1.4142135624, D11;
    pull_d D11, m_sqrt2@main;
    double m_sqrt1_2@main;
    push_d 0.7071067812, D12;
    pull_d D12, m_sqrt1_2@main;
    int err_sock_ok@main;
    push_i 0, L0;
    pull_i L0, err_sock_ok@main;
    int err_no_such_process@main;
    push_i 3, L1;
    pull_i L1, err_no_such_process@main;
    int err_io_error@main;
    push_i 5, L2;
    pull_i L2, err_io_error@main;
    int err_notsock@main;
    push_i 88, L3;
    pull_i L3, err_notsock@main;
    int err_destaddrreq@main;
    push_i 89, L4;
    pull_i L4, err_destaddrreq@main;
    int err_msgsize@main;
    push_i 90, L5;
    pull_i L5, err_msgsize@main;
    int err_prototype@main;
    push_i 91, L6;
    pull_i L6, err_prototype@main;
    int err_noprotoopt@main;
    push_i 92, L7;
    pull_i L7, err_noprotoopt@main;
    int err_protonosupport@main;
    push_i 93, L8;
    pull_i L8, err_protonosupport@main;
    int err_socktnosupport@main;
    push_i 94, L9;
    pull_i L9, err_socktnosupport@main;
    int err_opnotsupport@main;
    push_i 95, L10;
    pull_i L10, err_opnotsupport@main;
    int err_pfnosupport@main;
    push_i 96, L11;
    pull_i L11, err_pfnosupport@main;
    int err_afnosupport@main;
    push_i 97, L12;
    pull_i L12, err_afnosupport@main;
    int err_addrinuse@main;
    push_i 98, L13;
    pull_i L13, err_addrinuse@main;
    int err_addrnotavail@main;
    push_i 99, L14;
    pull_i L14, err_addrnotavail@main;
    int err_netdown@main;
    push_i 100, L15;
    pull_i L15, err_netdown@main;
    int err_netunreach@main;
    push_i 101, L16;
    pull_i L16, err_netunreach@main;
    int err_netreset@main;
    push_i 102, L17;
    pull_i L17, err_netreset@main;
    int err_connaborted@main;
    push_i 103, L18;
    pull_i L18, err_connaborted@main;
    int err_connreset@main;
    push_i 104, L19;
    pull_i L19, err_connreset@main;
    int err_nobufs@main;
    push_i 105, L20;
    pull_i L20, err_nobufs@main;
    int err_isconn@main;
    int err_notconn@main;
    push_i 107, L21;
    pull_i L21, err_notconn@main;
    int err_shutdown@main;
    push_i 108, L22;
    pull_i L22, err_shutdown@main;
    int err_toomanyrefs@main;
    push_i 109, L23;
    pull_i L23, err_toomanyrefs@main;
    int err_timedout@main;
    push_i 110, L24;
    pull_i L24, err_timedout@main;
    int err_connrefused@main;
    push_i 111, L25;
    pull_i L25, err_connrefused@main;
    int err_nosys@main;
    push_i 78, L26;
    pull_i L26, err_nosys@main;
    int err_host_is_down@main;
    push_i 112, L27;
    pull_i L27, err_host_is_down@main;
    int err_no_route_to_host@main;
    push_i 113, L28;
    pull_i L28, err_no_route_to_host@main;
#setreg_l       L255, err_sock;
    int _err_sock;
    int _err_sock_ok;
    pull_i L0, _err_sock_ok;
    int _err_connrefused;
    pull_i L25, _err_connrefused;
    int _err_nosys;
    pull_i L26, _err_nosys;
    int null@main;
    push_i 0, L29;
    pull_i L29, null@main;
    int one@main;
    push_i 1, L30;
    pull_i L30, one@main;
    int two@main;
    push_i 2, L31;
    pull_i L31, two@main;
    int three@main;
    push_i 3, L32;
    pull_i L32, three@main;
    int four@main;
    push_i 4, L33;
    pull_i L33, four@main;
    int five@main;
    push_i 5, L34;
    pull_i L34, five@main;
    int six@main;
    push_i 6, L35;
    pull_i L35, six@main;
    int seven@main;
    push_i 7, L36;
    pull_i L36, seven@main;
    int eight@main;
    push_i 8, L37;
    pull_i L37, eight@main;
    int _r[192];
    int _g[192];
    int _b[192];
    int _client;
    int _client_open;
    push_i null@main, L38;
    pull_i L38, _client_open;
    int _ret;
    int thread1@main;
    int thread2@main;
    int thread3@main;
    int thread4@main;
    int thread5@main;
    int thread6@main;
    int thread7@main;
    int thread8@main;
    int xstart@main;
    int xend@main;
    int width@main;
    push_i 320, L39;
    pull_i L39, width@main;
    int height@main;
    push_i 240, L40;
    pull_i L40, height@main;
    int width_thread@main;
    push_i width@main, L41;
    pull_i L41, width_thread@main;
    push_i width_thread@main, L42;
    push_i 8, L41;
    div_l L42, L41, L43;
    pull_i L43, width_thread@main;
    int _draw_mutex;
    qint hundred_points_ticks@main;
    push_q 2858687Q, L42;
    pull_q L42, hundred_points_ticks@main;
    qint hundred@main;
    push_q 100Q, L44;
    pull_q L44, hundred@main;
    qint p@main;
    stpush_all_all ;
    jsr init_colors;
    stpull_all_all ;
    stpush_all_all ;
    push_i height@main, L45;
    stpush_l L45;
    push_i width@main, L40;
    stpush_l L40;
    jsr screen;
    stpull_all_all ;
    jit jit_start1, jit_end1;
    jit jit_start2, jit_end2;
    jit jit_start3, jit_end3;
    ton ;
    thread_create L39, draw_fract;
    pull_i L39, thread1@main;
    push_i thread1@main, L46;
    thread_sync L46;
    stpush_all_all ;
    push_i one@main, L39;
    stpush_l L39;
    push_i width_thread@main, L30;
    stpush_l L30;
    jsr get_xparam;
    stpull_l L43;
    pull_i L43, xend@main;
    stpull_l L43;
    pull_i L43, xstart@main;
    stpull_all_s ;
    stpull_all_d ;
    stpull_all_l ;
    push_i thread1@main, L43;
    push_i xend@main, L46;
    thpush_l L43, L46;
    push_i thread1@main, L47;
    push_i xstart@main, L43;
    thpush_l L47, L43;
    push_i thread1@main, L48;
    push_i height@main, L47;
    thpush_l L48, L47;
    push_i thread1@main, L45;
    push_i width@main, L48;
    thpush_l L45, L48;
    push_i thread1@main, L40;
    thpush_sync L40;
    thread_create L45, draw_fract;
    pull_i L45, thread2@main;
    push_i thread2@main, L49;
    thread_sync L49;
    stpush_all_all ;
    push_i two@main, L45;
    stpush_l L45;
    push_i width_thread@main, L31;
    stpush_l L31;
    jsr get_xparam;
    stpull_l L30;
    pull_i L30, xend@main;
    stpull_l L30;
    pull_i L30, xstart@main;
    stpull_all_s ;
    stpull_all_d ;
    stpull_all_l ;
    push_i thread2@main, L30;
    push_i xend@main, L43;
    thpush_l L30, L43;
    push_i thread2@main, L46;
    push_i xstart@main, L30;
    thpush_l L46, L30;
    push_i thread2@main, L49;
    push_i height@main, L46;
    thpush_l L49, L46;
    push_i thread2@main, L47;
    push_i width@main, L49;
    thpush_l L47, L49;
    push_i thread2@main, L48;
    thpush_sync L48;
    thread_create L47, draw_fract;
    pull_i L47, thread3@main;
    push_i thread3@main, L50;
    thread_sync L50;
    stpush_all_all ;
    push_i three@main, L47;
    stpush_l L47;
    push_i width_thread@main, L32;
    stpush_l L32;
    jsr get_xparam;
    stpull_l L31;
    pull_i L31, xend@main;
    stpull_l L31;
    pull_i L31, xstart@main;
    stpull_all_s ;
    stpull_all_d ;
    stpull_all_l ;
    push_i thread3@main, L30;
    push_i xend@main, L31;
    thpush_l L30, L31;
    push_i thread3@main, L43;
    push_i xstart@main, L30;
    thpush_l L43, L30;
    push_i thread3@main, L50;
    push_i height@main, L43;
    thpush_l L50, L43;
    push_i thread3@main, L46;
    push_i width@main, L50;
    thpush_l L46, L50;
    push_i thread3@main, L49;
    thpush_sync L49;
    thread_create L46, draw_fract;
    pull_i L46, thread4@main;
    push_i thread4@main, L51;
    thread_sync L51;
    stpush_all_all ;
    push_i four@main, L46;
    stpush_l L46;
    push_i width_thread@main, L33;
    stpush_l L33;
    jsr get_xparam;
    stpull_l L32;
    pull_i L32, xend@main;
    stpull_l L31;
    pull_i L31, xstart@main;
    stpull_all_s ;
    stpull_all_d ;
    stpull_all_l ;
    push_i thread4@main, L30;
    push_i xend@main, L31;
    thpush_l L30, L31;
    push_i thread4@main, L32;
    push_i xstart@main, L30;
    thpush_l L32, L30;
    push_i thread4@main, L51;
    push_i height@main, L32;
    thpush_l L51, L32;
    push_i thread4@main, L43;
    push_i width@main, L51;
    thpush_l L43, L51;
    push_i thread4@main, L50;
    thpush_sync L50;
    thread_create L43, draw_fract;
    pull_i L43, thread5@main;
    push_i thread5@main, L52;
    thread_sync L52;
    stpush_all_all ;
    push_i five@main, L43;
    stpush_l L43;
    push_i width_thread@main, L34;
    stpush_l L34;
    jsr get_xparam;
    stpull_l L33;
    pull_i L33, xend@main;
    stpull_l L31;
    pull_i L31, xstart@main;
    stpull_all_s ;
    stpull_all_d ;
    stpull_all_l ;
    push_i thread5@main, L30;
    push_i xend@main, L31;
    thpush_l L30, L31;
    push_i thread5@main, L33;
    push_i xstart@main, L30;
    thpush_l L33, L30;
    push_i thread5@main, L52;
    push_i height@main, L33;
    thpush_l L52, L33;
    push_i thread5@main, L32;
    push_i width@main, L52;
    thpush_l L32, L52;
    push_i thread5@main, L51;
    thpush_sync L51;
    thread_create L32, draw_fract;
    pull_i L32, thread6@main;
    push_i thread6@main, L53;
    thread_sync L53;
    stpush_all_all ;
    push_i six@main, L32;
    stpush_l L32;
    push_i width_thread@main, L35;
    stpush_l L35;
    jsr get_xparam;
    stpull_l L34;
    pull_i L34, xend@main;
    stpull_l L31;
    pull_i L31, xstart@main;
    stpull_all_s ;
    stpull_all_d ;
    stpull_all_l ;
    push_i thread6@main, L30;
    push_i xend@main, L31;
    thpush_l L30, L31;
    push_i thread6@main, L34;
    push_i xstart@main, L30;
    thpush_l L34, L30;
    push_i thread6@main, L53;
    push_i height@main, L34;
    thpush_l L53, L34;
    push_i thread6@main, L33;
    push_i width@main, L53;
    thpush_l L33, L53;
    push_i thread6@main, L52;
    thpush_sync L52;
    thread_create L33, draw_fract;
    pull_i L33, thread7@main;
    push_i thread7@main, L54;
    thread_sync L54;
    stpush_all_all ;
    push_i seven@main, L33;
    stpush_l L33;
    push_i width_thread@main, L36;
    stpush_l L36;
    jsr get_xparam;
    stpull_l L35;
    pull_i L35, xend@main;
    stpull_l L31;
    pull_i L31, xstart@main;
    stpull_all_s ;
    stpull_all_d ;
    stpull_all_l ;
    push_i thread7@main, L30;
    push_i xend@main, L31;
    thpush_l L30, L31;
    push_i thread7@main, L35;
    push_i xstart@main, L30;
    thpush_l L35, L30;
    push_i thread7@main, L54;
    push_i height@main, L35;
    thpush_l L54, L35;
    push_i thread7@main, L34;
    push_i width@main, L54;
    thpush_l L34, L54;
    push_i thread7@main, L53;
    thpush_sync L53;
    thread_create L34, draw_fract;
    pull_i L34, thread8@main;
    push_i thread8@main, L55;
    thread_sync L55;
    stpush_all_all ;
    push_i eight@main, L34;
    stpush_l L34;
    push_i width_thread@main, L37;
    stpush_l L37;
    jsr get_xparam;
    stpull_l L36;
    pull_i L36, xend@main;
    stpull_l L31;
    pull_i L31, xstart@main;
    stpull_all_s ;
    stpull_all_d ;
    stpull_all_l ;
    push_i thread8@main, L30;
    push_i xend@main, L31;
    thpush_l L30, L31;
    push_i thread8@main, L36;
    push_i xstart@main, L30;
    thpush_l L36, L30;
    push_i thread8@main, L55;
    push_i height@main, L36;
    thpush_l L55, L36;
    push_i thread8@main, L35;
    push_i width@main, L55;
    thpush_l L35, L55;
    push_i thread8@main, L54;
    thpush_sync L54;
    thread_join ;
    toff ;
    push_s "ms: ", S0;
    print_s S0;
    push_q _timer, L35;
    print_l L35;
    push_i one@main, L56;
    print_n L56;
    push_q hundred_points_ticks@main, L57;
    push_q hundred@main, L42;
    mul_l L57, L42, L57;
    push_q _timer, L44;
    div_l L57, L44, L57;
    pull_q L57, p@main;
    push_s "points: ", S1;
    print_s S1;
    push_q p@main, L35;
    print_l L35;
    push_i two@main, L57;
    print_n L57;

lab loop;
    push_i one@main, L56;
    wait_s L56;
    stpush_all_all ;
    jsr update_screen;
    stpull_all_all ;
    jmp loop;
    push_i null@main, L39;
    exit L39;

lab get_xparam;
    int width_thread@get_xparam;
    stpull_l L0;
    pull_i L0, width_thread@get_xparam;
    int threadn@get_xparam;
    stpull_l L1;
    pull_i L1, threadn@get_xparam;
    int xstart@get_xparam;
    int xend@get_xparam;
    int one@get_xparam;
    push_i 1, L2;
    pull_i L2, one@get_xparam;
    mul_l L1, L0, L3;
    pull_i L3, xend@get_xparam;
    sub_l L3, L0, L4;
    pull_i L4, xstart@get_xparam;
    dec_l L3;
    pull_i L3, xend@get_xparam;
    push_s "xstart: ", S0;
    print_s S0;
    print_l L4;
    push_s " xend: ", S1;
    print_s S1;
    print_l L3;
    print_n L2;
    push_i xstart@get_xparam, L5;
    stpush_l L5;
    push_i xend@get_xparam, L5;
    stpush_l L5;
    rts ;

lab debug_colors;
    int i@debug_colors;
    push_i 0, L0;
    pull_i L0, i@debug_colors;
    int max@debug_colors;
    push_i 192, L1;
    pull_i L1, max@debug_colors;
    int r@debug_colors;
    int g@debug_colors;
    int b@debug_colors;
    int one@debug_colors;
    push_i 1, L2;
    pull_i L2, one@debug_colors;
    int f@debug_colors;

lab for_0;
    push_i i@debug_colors, L3;
    move_a_i _r, L3, L0;
    pull_i L0, r@debug_colors;
    push_i i@debug_colors, L4;
    move_a_i _g, L4, L3;
    pull_i L3, g@debug_colors;
    push_i i@debug_colors, L5;
    move_a_i _b, L5, L4;
    pull_i L4, b@debug_colors;
    push_i r@debug_colors, L6;
    print_l L6;
    push_i one@debug_colors, L0;
    print_n L0;
    push_i g@debug_colors, L7;
    print_l L7;
    push_i one@debug_colors, L3;
    print_n L3;
    push_i b@debug_colors, L0;
    print_l L0;
    push_i one@debug_colors, L4;
    print_n L4;
    push_i i@debug_colors, L5;
    inc_l L5;
    pull_i L5, i@debug_colors;
    push_i max@debug_colors, L3;
    ls_jmp_l L5, L3, for_0;
    push_s "COLORS END", S0;
    print_s S0;
    push_i one@debug_colors, L8;
    print_n L8;
    push_i one@debug_colors, L4;
    print_n L4;
    rts ;

lab init_colors;
 #setreg_l  L0, i;
 #setreg_l  L1, j;
 #setreg_l  L2, max;
 #setreg_l  L3, color;
 #setreg_l  L4, c;
 #setreg_l  L5, x;
 push_i   0, i;
 push_i   64, max;
lab init_colors_loop; 
 push_i   0, color;
 move_i_a  color, _r, i;
 push_i   4, x;
 mul_l   x, i, x;
 move_i_a  x, _g, i;
 push_i   255, c;
 sub_l   c, x, color;
 move_i_a  color, _b, i;
 push_i   64, j;
 add_l   j, i, j;
 move_i_a  x, _r, j;
 push_i   255, c;
 sub_l   c, x, color;
 move_i_a  color, _g, j;
 push_i   0, color;
 move_i_a  color, _b, j;
 push_i   128, j;
 add_l   j, i, j;
 push_i   255, c;
 sub_l   c, x, color;
 move_i_a  color, _r, j;
 push_i   0, color;
 move_i_a  color, _b, j;
 move_i_a  x, _g, j;
 inc_ls_jmp_l  i, max, init_colors_loop;
 rts;

lab draw_fract;
    thpull_sync ;
    int Pscreen_width@draw_fract;
    stpull_l L0;
    ppull_i L0, Pscreen_width@draw_fract;
    int Pscreen_height@draw_fract;
    stpull_l L1;
    ppull_i L1, Pscreen_height@draw_fract;
    int Pxstart@draw_fract;
    stpull_l L2;
    ppull_i L2, Pxstart@draw_fract;
    int Pxend@draw_fract;
    stpull_l L3;
    ppull_i L3, Pxend@draw_fract;
    double Pscreen_width_d@draw_fract;
    double Pscreen_height_d@draw_fract;
    int Pnull@draw_fract;
    push_i 0, L4;
    ppull_i L4, Pnull@draw_fract;
    int Pone@draw_fract;
    push_i 1, L5;
    ppull_i L5, Pone@draw_fract;
    int Pi@draw_fract;
    int Pj@draw_fract;
    int Pk@draw_fract;
    int Pl@draw_fract;
    double Pm_d@draw_fract;
    double Pn_d@draw_fract;
    double Po_d@draw_fract;
    double Pp_d@draw_fract;
    double Pq_d@draw_fract;
    double Pr_d@draw_fract;
    int Pf@draw_fract;
    qint Plimit@draw_fract;
    push_q 500Q, L6;
    ppull_q L6, Plimit@draw_fract;
    qint Px@draw_fract;
    qint Py@draw_fract;
    qint Ppixel@draw_fract;
    int Ptype@draw_fract;
    push_i 1, L7;
    ppull_i L7, Ptype@draw_fract;
    int Ptwo@draw_fract;
    push_i 2, L8;
    ppull_i L8, Ptwo@draw_fract;
    int Pfour@draw_fract;
    push_i 4, L9;
    ppull_i L9, Pfour@draw_fract;
    double Pxcenter@draw_fract;
    push_d -0.1012617782, D0;
    ppull_d D0, Pxcenter@draw_fract;
    double Pycenter@draw_fract;
    push_d 0.9542199377, D1;
    ppull_d D1, Pycenter@draw_fract;
    double Pxpos@draw_fract;
    double Pypos@draw_fract;
    double Pxconst@draw_fract;
    push_d 0.0000000000, D2;
    ppull_d D2, Pxconst@draw_fract;
    double Pyconst@draw_fract;
    push_d 0.0000000000, D3;
    ppull_d D3, Pyconst@draw_fract;
    double Pzoom@draw_fract;
    push_d 1.0000000000, D4;
    ppull_d D4, Pzoom@draw_fract;
    double PzoomStep@draw_fract;
    push_d 1.0500000000, D5;
    ppull_d D5, PzoomStep@draw_fract;
    double PzoomEnd@draw_fract;
    push_d 10000000000000.0000000000, D6;
    ppull_d D6, PzoomEnd@draw_fract;
    double Ptwo_d@draw_fract;
    push_d 2.0000000000, D7;
    ppull_d D7, Ptwo_d@draw_fract;
    double Pfour_d@draw_fract;
    push_d 4.0000000000, D8;
    ppull_d D8, Pfour_d@draw_fract;
    double Ppixel_d@draw_fract;
    double Pzx@draw_fract;
    double Pzy@draw_fract;
    double Pcx@draw_fract;
    double Pcy@draw_fract;
    double Pzxpwr@draw_fract;
    double Pzypwr@draw_fract;
    2double L0, D9;
    ppull_d D9, Pscreen_width_d@draw_fract;
    2double L1, D10;
    ppull_d D10, Pscreen_height_d@draw_fract;
    ls_l L0, L1, L10;
    ppull_i L10, Pf@draw_fract;
    ppush_i Pf@draw_fract, L11;
    not_l L11, L10;
    jmp_l L10, else_0;
    ppull_q L0, Ppixel@draw_fract;
    jmp endif_0;

lab else_0;
    ppull_q L1, Ppixel@draw_fract;

lab endif_0;
    2double L1, D11;
    ppull_d D11, Ppixel_d@draw_fract;
    push_s "width: ", S0;
    print_s S0;
    ppush_i Pscreen_width@draw_fract, L0;
    print_l L0;
    print_n L5;
    push_s "height: ", S1;
    print_s S1;
    ppush_i Pscreen_height@draw_fract, L10;
    print_l L10;
    print_n L5;
    push_s "pixel: ", S2;
    print_s S2;
    print_d D11;
    print_n L5;
    ppull_q L2, Px@draw_fract;

lab for_1;
    push_i 0, L12;
    ppull_q L12, Py@draw_fract;

lab for_2;
    stpush_all_all ;
    jsr calc_fract;
    stpull_all_all ;
    inc_l L12;
    ppull_q L12, Py@draw_fract;
    ls_jmp_l L12, L10, for_2;
    stpush_all_all ;
    jsr update_screen;
    stpull_all_all ;
    inc_l L2;
    ppull_q L2, Px@draw_fract;
    lseq_jmp_l L2, L3, for_1;
    exit L4;
    rts ;

lab calc_fract;
 #setreg_d  D0, screen_width;
 #setreg_d  D1, screen_height;
 #setreg_d  D2, two;
 #setreg_d  D3, o_d;
 #setreg_d  D4, n_d;
 #setreg_d  D5, four;
 #setreg_d  D6, p_d;
 #setreg_d  D7, pixel;
 #setreg_d  D8, m_d;
 #setreg_d  D9, q_d;
 #setreg_d  D10, r_d;
 #setreg_d  D11, xpos;
 #setreg_d  D12, ypos;
 #setreg_d  D13, xcenter;
 #setreg_d  D14, ycenter;
 #setreg_d  D15, zoom;
 #setreg_d  D16, zx;
 #setreg_d  D17, zy;
 #setreg_d  D18, cx;
 #setreg_d  D19, cy;
 #setreg_d  D20, xconst;
 #setreg_d  D21, yconst;
 #setreg_d  D22, zxpwr;
 #setreg_d  D23, zypwr;
 #setreg_l  L0, x;
 #setreg_l  L1, y;
 #setreg_l  L2, i;
 #setreg_l  L3, limit;
 #setreg_l  L4, type;
 #setreg_l  L5, null;
 #setreg_l  L6, f;
 #setreg_l  L7, one;
 #setreg_l  L8, max_color;
 #setreg_l  L9, client;
 #setreg_l  L10, ret;
 #setreg_l  L11, color;
 #setreg_l  L12, r;
 #setreg_l  L13, g;
 #setreg_l  L14, b;
 ppush_i   Ptype@draw_fract, type;
 push_i   0, null;
 push_i   1, one;
 push_i   192, max_color;
 push_i   _client, client;
 ppush_q   Plimit@draw_fract, limit;
 ppush_d   Pxconst@draw_fract, xconst;
 ppush_d   Pyconst@draw_fract, yconst;
 ppush_q   Px@draw_fract, x;
 2double   x, n_d;
 ppush_d   Pscreen_width_d@draw_fract, screen_width;
 ppush_d   Pscreen_height_d@draw_fract, screen_height;
 ppush_d   Ptwo_d@draw_fract, two;
 ppush_d   Pfour_d@draw_fract, four;
 ppush_d   Ppixel_d@draw_fract, pixel;
 ppush_d   Pzoom@draw_fract, zoom;
 ppush_d   Pxcenter@draw_fract, xcenter;
 ppush_d   Pycenter@draw_fract, ycenter;
lab jit_start1;
 div_d   screen_width, two, r_d;
 sub_d   n_d, r_d, o_d;
 mul_d   o_d, four, m_d;
 mul_d   pixel, zoom, p_d;
 div_d   m_d, p_d, q_d;
 add_d   xcenter, q_d, xpos;
lab jit_end1; 
 ppull_d   xpos, Pxpos@draw_fract;
 ppush_q   Py@draw_fract, y;   
 2double   y, n_d;
lab jit_start2;
 div_d   screen_height, two, r_d;
 sub_d   n_d, r_d, o_d;
 mul_d   o_d, four, m_d;
 div_d   m_d, p_d, q_d;
 add_d   ycenter, q_d, ypos;
lab jit_end2;
 ppull_d   ypos, Pypos@draw_fract;
lab jit_start3;
 eq_jmp_l  type, null, type_null;
 move_d   xpos, cx;
 move_d   ypos, cy;
 move_d   xconst, zx;
 move_d   yconst, zy;
 jmp    type_set;
lab type_null;
 move_d   xpos, zx;
 move_d   ypos, zy;
 move_d   xconst, cx;
 move_d   yconst, cy;
lab type_set; 
 move_l   limit, i;
lab for_i;
 mul_d   zx, zx, m_d;
 mul_d   zy, zy, n_d;
 add_d   m_d, n_d, o_d;
 ls_d   o_d, four, f;
 jmp_l   f, not_cyclic_point;
 jmp       cyclic_point;
lab not_cyclic_point;
 sub_d   m_d, n_d, zxpwr;
 mul_d   two, zx, zypwr;
 mul_d   zypwr, zy, zypwr;
 add_d   zxpwr, cx, zx;
 add_d   zypwr, cy, zy;
 dec_greq_jmp_l i, null, for_i;
lab cyclic_point;
lab jit_end3;
 nop;
 var_lock  _draw_mutex;
 ls_jmp_l  i, null, draw_color_black;
 jmp    draw_color;
lab draw_done; 
 var_unlock  _draw_mutex;
 rts;
lab draw_color_black;
 stpush_all_l;
    stpush_all_d;
 stpush_l  client;
 stpush_l  null;
 stpush_l  null;
 stpush_l  null;
 jsr    nanogfx_color;
 stpush_l  client;
 stpush_l  x;
 stpush_l  y;
 jsr    nanogfx_pixel;
 stpull_l  ret;
 pull_i   ret, _ret;
 jsr    check_answer;
 stpull_all_d;
 stpull_all_l;
 jmp    draw_done;
lab draw_color;
 mod_l   i, max_color, color;
 move_a_i  _r, color, r;
 move_a_i  _g, color, g;
 move_a_i  _b, color, b;
 stpush_all_l;
    stpush_all_d;
 stpush_l  client;
 stpush_l  r;
 stpush_l  g;
 stpush_l  b;
 jsr    nanogfx_color;
 stpush_l  client;
 stpush_l  x;
 stpush_l  y;
 jsr    nanogfx_pixel;
 stpull_l  ret;
 pull_i   ret, _ret;
 jsr    check_answer;
 stpull_all_d;
 stpull_all_l;
 jmp    draw_done;
 #unsetreg_all_l;
 #unsetreg_all_d;

lab update_screen;
    var_lock _draw_mutex;
    stpush_all_all ;
    push_i _client, L0;
    stpush_l L0;
    jsr nanogfx_updatescreen;
    stpull_l L1;
    pull_i L1, _ret;
    stpull_all_s ;
    stpull_all_d ;
    stpull_all_l ;
    stpush_all_all ;
    jsr check_answer;
    stpull_all_all ;
    var_unlock _draw_mutex;
    rts ;

lab screen;
    int width@screen;
    stpull_l L0;
    pull_i L0, width@screen;
    int height@screen;
    stpull_l L1;
    pull_i L1, height@screen;
    int err_sock_ok@screen;
    push_i 0, L2;
    pull_i L2, err_sock_ok@screen;
    int err_no_such_process@screen;
    push_i 3, L3;
    pull_i L3, err_no_such_process@screen;
    int err_io_error@screen;
    push_i 5, L4;
    pull_i L4, err_io_error@screen;
    int err_notsock@screen;
    push_i 88, L5;
    pull_i L5, err_notsock@screen;
    int err_destaddrreq@screen;
    push_i 89, L6;
    pull_i L6, err_destaddrreq@screen;
    int err_msgsize@screen;
    push_i 90, L7;
    pull_i L7, err_msgsize@screen;
    int err_prototype@screen;
    push_i 91, L8;
    pull_i L8, err_prototype@screen;
    int err_noprotoopt@screen;
    push_i 92, L9;
    pull_i L9, err_noprotoopt@screen;
    int err_protonosupport@screen;
    push_i 93, L10;
    pull_i L10, err_protonosupport@screen;
    int err_socktnosupport@screen;
    push_i 94, L11;
    pull_i L11, err_socktnosupport@screen;
    int err_opnotsupport@screen;
    push_i 95, L12;
    pull_i L12, err_opnotsupport@screen;
    int err_pfnosupport@screen;
    push_i 96, L13;
    pull_i L13, err_pfnosupport@screen;
    int err_afnosupport@screen;
    push_i 97, L14;
    pull_i L14, err_afnosupport@screen;
    int err_addrinuse@screen;
    push_i 98, L15;
    pull_i L15, err_addrinuse@screen;
    int err_addrnotavail@screen;
    push_i 99, L16;
    pull_i L16, err_addrnotavail@screen;
    int err_netdown@screen;
    push_i 100, L17;
    pull_i L17, err_netdown@screen;
    int err_netunreach@screen;
    push_i 101, L18;
    pull_i L18, err_netunreach@screen;
    int err_netreset@screen;
    push_i 102, L19;
    pull_i L19, err_netreset@screen;
    int err_connaborted@screen;
    push_i 103, L20;
    pull_i L20, err_connaborted@screen;
    int err_connreset@screen;
    push_i 104, L21;
    pull_i L21, err_connreset@screen;
    int err_nobufs@screen;
    push_i 105, L22;
    pull_i L22, err_nobufs@screen;
    int err_isconn@screen;
    int err_notconn@screen;
    push_i 107, L23;
    pull_i L23, err_notconn@screen;
    int err_shutdown@screen;
    push_i 108, L24;
    pull_i L24, err_shutdown@screen;
    int err_toomanyrefs@screen;
    push_i 109, L25;
    pull_i L25, err_toomanyrefs@screen;
    int err_timedout@screen;
    push_i 110, L26;
    pull_i L26, err_timedout@screen;
    int err_connrefused@screen;
    push_i 111, L27;
    pull_i L27, err_connrefused@screen;
    int err_nosys@screen;
    push_i 78, L28;
    pull_i L28, err_nosys@screen;
    int err_host_is_down@screen;
    push_i 112, L29;
    pull_i L29, err_host_is_down@screen;
    int err_no_route_to_host@screen;
    push_i 113, L30;
    pull_i L30, err_no_route_to_host@screen;
#setreg_l       L255, err_sock;
    lint nlf@screen;
    lint ncr@screen;
    string cr@screen[2];
    string lf@screen[2];
    string fnewline@screen[3];
    int args@screen;
    int null@screen;
    push_i 0, L31;
    pull_i L31, null@screen;
    int one@screen;
    push_i 1, L32;
    pull_i L32, one@screen;
    int two@screen;
    push_i 2, L33;
    pull_i L33, two@screen;
    string ip@screen[256];
    string portstr@screen[256];
    string buf@screen[256];
    int port@screen;
    int f@screen;
    string s@screen[256];
    int alpha@screen;
    push_i 255, L34;
    pull_i L34, alpha@screen;
    int bit@screen;
    push_i 24, L35;
    pull_i L35, bit@screen;
    int _ret;
    push_l 13L, L36;
    pull_l L36, ncr@screen;
    char L36, S0;
    pull_s S0, fnewline@screen;
    push_l 10L, L37;
    pull_l L37, nlf@screen;
    char L37, S1;
    pull_s S1, lf@screen;
    push_s fnewline@screen, S2;
    add_s S2, S1, S3;
    pull_s S3, _fnewline;
    argnum L38;
    pull_i L38, args@screen;
    neq_l L38, L32, L39;
    pull_i L39, f@screen;
    push_i f@screen, L40;
    not_l L40, L39;
    jmp_l L39, else_1;
    stpush_all_all ;
    jsr show_args;
    stpull_all_all ;

lab else_1;
    push_i null@screen, L39;
    argstr L39, S2;
    pull_s S2, ip@screen;
    push_i one@screen, L31;
    argstr L31, S4;
    pull_s S4, portstr@screen;
    push_s portstr@screen, S5;
    val_l S5, L32;
    pull_i L32, port@screen;
    stpush_all_all ;
    jsr nanogfx_init;
    stpull_all_all ;
    push_s ip@screen, S4;
    push_i port@screen, L42;
    scopen L41, S4, L42;
    pull_i L41, _client;
        pull_i      err_sock, _err_sock;
    push_i _err_sock, L32;
    push_i _err_sock_ok, L43;
    eq_l L32, L43, L44;
    pull_i L44, f@screen;
    push_i f@screen, L40;
    not_l L40, L44;
    jmp_l L44, else_2;
    jmp ip_ok;

lab else_2;
    push_s ip@screen, S2;
    pull_s S2, buf@screen;
    push_s buf@screen, S4;
    hostbyname S4, S6;
    pull_s S6, ip@screen;
    push_s ip@screen, S2;
    push_i port@screen, L41;
    scopen L44, S2, L41;
    pull_i L44, _client;
    stpush_all_all ;
    jsr check_err;
    stpull_all_all ;

lab ip_ok;
    push_i 1, L42;
    pull_i L42, _client_open;
    push_s "nano - fractalix parallel", S6;
    pull_s S6, s@screen;
    stpush_all_all ;
    push_i _client, L45;
    stpush_l L45;
    push_i null@screen, L44;
    stpush_l L44;
    push_s s@screen, S7;
    stpush_s S7;
    push_s s@screen, S8;
    stpush_s S8;
    push_i width@screen, L39;
    stpush_l L39;
    push_i height@screen, L46;
    stpush_l L46;
    push_i bit@screen, L1;
    stpush_l L1;
    push_i alpha@screen, L35;
    stpush_l L35;
    jsr nanogfx_openscreen;
    stpull_l L34;
    pull_i L34, _ret;
    stpull_all_s ;
    stpull_all_d ;
    stpull_all_l ;
    push_i _ret, L34;
    push_i null@screen, L47;
    neq_l L34, L47, L44;
    pull_i L44, f@screen;
    push_i f@screen, L40;
    not_l L40, L44;
    jmp_l L44, else_3;
    push_s "no screen!", S7;
    print_s S7;
    push_i one@screen, L44;
    print_n L44;
    stpush_all_all ;
    jsr end;
    stpull_all_all ;

lab else_3;
    push_i _client, L48;
    scclose L48;
    push_i two@screen, L45;
    wait_s L45;
    push_s ip@screen, S9;
    push_i port@screen, L48;
    scopen L33, S9, L48;
    pull_i L33, _client;
    stpush_all_all ;
    jsr check_err;
    stpull_all_all ;
    stpush_all_all ;
    jsr clear_screen;
    stpull_all_all ;
    stpush_all_all ;
    jsr color_white;
    stpull_all_all ;
    rts ;

lab circle;
    int x@circle;
    stpull_l L0;
    pull_i L0, x@circle;
    int y@circle;
    stpull_l L1;
    pull_i L1, y@circle;
    int radius@circle;
    stpull_l L2;
    pull_i L2, radius@circle;
    stpush_all_all ;
    push_i _client, L3;
    stpush_l L3;
    stpush_l L0;
    stpush_l L1;
    stpush_l L2;
    jsr nanogfx_circle;
    stpull_l L4;
    pull_i L4, _ret;
    stpull_all_s ;
    stpull_all_d ;
    stpull_all_l ;
    stpush_all_all ;
    jsr check_answer;
    stpull_all_all ;
    rts ;

lab line;
    int x@line;
    stpull_l L0;
    pull_i L0, x@line;
    int y@line;
    stpull_l L1;
    pull_i L1, y@line;
    int x2@line;
    stpull_l L2;
    pull_i L2, x2@line;
    int y2@line;
    stpull_l L3;
    pull_i L3, y2@line;
    stpush_all_all ;
    push_i _client, L4;
    stpush_l L4;
    stpush_l L0;
    stpush_l L1;
    stpush_l L2;
    stpush_l L3;
    jsr nanogfx_line;
    stpull_l L5;
    pull_i L5, _ret;
    stpull_all_s ;
    stpull_all_d ;
    stpull_all_l ;
    stpush_all_all ;
    jsr check_answer;
    stpull_all_all ;
    rts ;

lab clear_screen;
    int null@clear_screen;
    push_i 0, L0;
    pull_i L0, null@clear_screen;
    int alpha@clear_screen;
    push_i 255, L1;
    pull_i L1, alpha@clear_screen;
    stpush_all_all ;
    push_i _client, L2;
    stpush_l L2;
    stpush_l L0;
    stpush_l L0;
    stpush_l L0;
    jsr nanogfx_color;
    stpull_all_all ;
    stpush_all_all ;
    stpush_l L2;
    jsr nanogfx_clearscreen;
    stpull_l L3;
    pull_i L3, _ret;
    stpull_all_s ;
    stpull_all_d ;
    stpull_all_l ;
    stpush_all_all ;
    jsr check_answer;
    stpull_all_all ;
    stpush_all_all ;
    stpush_l L2;
    stpush_l L1;
    jsr nanogfx_alpha;
    stpull_all_all ;
    rts ;

lab color_white;
    int r@color_white;
    push_i 255, L0;
    pull_i L0, r@color_white;
    int g@color_white;
    push_i 255, L1;
    pull_i L1, g@color_white;
    int b@color_white;
    push_i 255, L2;
    pull_i L2, b@color_white;
    stpush_all_all ;
    push_i _client, L3;
    stpush_l L3;
    stpush_l L0;
    stpush_l L1;
    stpush_l L2;
    jsr nanogfx_color;
    stpull_all_all ;
    rts ;

lab check_answer;
    int f@check_answer;
    int null@check_answer;
    push_i 0, L0;
    pull_i L0, null@check_answer;
    int one@check_answer;
    push_i 1, L1;
    pull_i L1, one@check_answer;
    push_i _ret, L2;
    neq_l L2, L0, L3;
    pull_i L3, f@check_answer;
    push_i f@check_answer, L4;
    not_l L4, L3;
    jmp_l L3, else_4;
    push_s "ERROR: server error!", S0;
    print_s S0;
    push_i one@check_answer, L3;
    print_n L3;
    stpush_all_all ;
    jsr end;
    stpull_all_all ;

lab else_4;
    rts ;

lab show_args;
    int n@show_args;
    push_i 1, L0;
    pull_i L0, n@show_args;
    push_s "fractalix <ip> <port>", S0;
    print_s S0;
    print_n L0;
    stpush_all_all ;
    jsr end;
    stpull_all_all ;
    rts ;

lab end;
    int ret@end;
    push_i 0, L0;
    pull_i L0, ret@end;
    int f@end;
    int one@end;
    push_i 1, L1;
    pull_i L1, one@end;
    push_i _client_open, L2;
    eq_l L2, L1, L3;
    pull_i L3, f@end;
    push_i f@end, L4;
    not_l L4, L3;
    jmp_l L3, else_5;
    stpush_all_all ;
    jsr close_client;
    stpull_all_all ;

lab else_5;
    push_i ret@end, L3;
    exit L3;
    rts ;

lab close_client;
    push_i _client, L0;
    scclose L0;
    rts ;

lab check_err;
    int f@check_err;
    int n@check_err;
    push_i 1, L0;
    pull_i L0, n@check_err;
        pull_i      err_sock, _err_sock;
    push_i _err_sock, L1;
    push_i _err_sock_ok, L2;
    neq_l L1, L2, L3;
    pull_i L3, f@check_err;
    push_i f@check_err, L4;
    not_l L4, L3;
    jmp_l L3, else_6;
    jmp error;

lab else_6;
    jmp check_err_end;

lab error;
    push_s "socket error: ", S0;
    print_s S0;
    push_i _err_sock, L3;
    print_l L3;
    push_i n@check_err, L1;
    print_n L1;
    push_i _err_sock, L5;
    push_i _err_connrefused, L3;
    eq_l L5, L3, L6;
    pull_i L6, f@check_err;
    push_i f@check_err, L4;
    not_l L4, L6;
    jmp_l L6, else_7;
    push_s "server not found!", S1;
    print_s S1;
    push_i n@check_err, L6;
    print_n L6;

lab else_7;
    push_i _err_sock, L1;
    push_i _err_nosys, L5;
    eq_l L1, L5, L7;
    pull_i L7, f@check_err;
    push_i f@check_err, L4;
    not_l L4, L7;
    jmp_l L7, else_8;
    push_s "tcp stack not running!", S2;
    print_s S2;
    push_i n@check_err, L7;
    print_n L7;

lab else_8;
    stpush_all_all ;
    jsr end;
    stpull_all_all ;

lab check_err_end;
    rts ;

lab nanogfx_init;
    #unsetreg_all_l;
    int end; int shutdown; int open_screen; int close_screen; int clear_screen; int update_screen;
    int color; int pixel; int line; int rectangle; int rectangle_fill; int circle; int circle_fill;
    int ellipse; int ellipse_fill; int pie; int pie_fill; int trigon; int trigon_fill; int polygon; int polygon_fill;
    int bezier;
    int text_bmap; int loadfont_bmap; int text_ttf; int loadfont_ttf; int load_picture; int getpixel; int getmouse;
    int gadget_color_border_light; int gadget_color_border_shadow;
    int gadget_color_backgr_light; int gadget_color_backgr_shadow;
    int gadget_color_text_light; int gadget_color_text_shadow;
    int gadget_button; int gadget_checkbox; int gadget_cycle; int gadget_string; int gadget_box; int gadget_event;
    int gadget_get_x2y2; int gadget_checkbox_change; int gadget_string_change; int gadget_box_change;
    int sound_play_wav; int sound_stop_channel; int sound_play_music; int sound_stop_music;
 int gadget_progress_bar; int gadget_progress_bar_change;
    int rs232_open_comport; int rs232_poll_comport; int rs232_send_byte; int rs232_send_buf; int rs232_close_comport;
    int screennum; int width; int height; int bit;
    int X; int Y; int X2; int Y2; int X3; int Y3;
    int vectors; int steps; int radius; int Xradius; int Yradius; int startangle; int endangle;
    int r_c; int g_c; int b_c; int r_bg; int g_bg; int b_bg; int alpha;
    int fontwidth; int fontheight; int fontsize; int fontstyle;
    int fontstyle_normal; int fontstyle_bold; int fontstyle_italic; int fontstyle_underline;
    int gadget; int gadgets; int gadget_status; int gadget_int_value; int gadget_cycle_entries;
    int gadget_string_str_len; int gadget_string_vis_len;
    int VX; int VY;
    int text; int screentitle; int screenicon; int picturename; int fontname;
    int gadget_string_value; int gadget_cycle_text;
    int sound_wav_file; int sound_channel; int sound_loops; int sound_music_file;
    int rs232_comport_number; int rs232_baudrate; int rs232_buf_size; int rs232_byte; int rs232_buf;
 int gadget_progress_bar_value;
    push_i          1, L0;
    pull_i          L0, end;
    push_i          2, L0;
    pull_i          L0, shutdown;
    push_i          3, L0;
    pull_i          L0, open_screen;
    push_i          4, L0;
    pull_i          L0, close_screen;
    push_i          5, L0;
    pull_i          L0, clear_screen;
    push_i          6, L0;
    pull_i          L0, update_screen;
    push_i          7, L0;
    pull_i          L0, color;
    push_i          8, L0;
    pull_i          L0, pixel;
    push_i          9, L0;
    pull_i          L0, line;
    push_i          10, L0;
    pull_i          L0, rectangle;
    push_i          11, L0;
    pull_i          L0, rectangle_fill;
    push_i          12, L0;
    pull_i          L0, circle;
    push_i          13, L0;
    pull_i          L0, circle_fill;
    push_i          14, L0;
    pull_i          L0, ellipse;
    push_i          15, L0;
    pull_i          L0, ellipse_fill;
    push_i          16, L0;
    pull_i          L0, pie;
    push_i          17, L0;
    pull_i          L0, pie_fill;
    push_i          18, L0;
    pull_i          L0, trigon;
    push_i          19, L0;
    pull_i          L0, trigon_fill;
    push_i          20, L0;
    pull_i          L0, polygon;
    push_i          21, L0;
    pull_i          L0, polygon_fill;
    push_i          22, L0;
    pull_i          L0, bezier;
    push_i          23, L0;
    pull_i          L0, text_bmap;
    push_i          24, L0;
    pull_i          L0, loadfont_bmap;
    push_i          25, L0;
    pull_i          L0, text_ttf;
    push_i          26, L0;
    pull_i          L0, loadfont_ttf;
    push_i          27, L0;
    pull_i          L0, load_picture;
    push_i          28, L0;
    pull_i          L0, getpixel;
    push_i          29, L0;
    pull_i          L0, getmouse;
    push_i          30, L0;
    pull_i          L0, gadget_color_border_light;
    push_i          31, L0;
    pull_i          L0, gadget_color_border_shadow;
    push_i          32, L0;
    pull_i          L0, gadget_color_backgr_light;
    push_i          33, L0;
    pull_i          L0, gadget_color_backgr_shadow;
    push_i          34, L0;
    pull_i          L0, gadget_color_text_light;
    push_i          35, L0;
    pull_i          L0, gadget_color_text_shadow;
    push_i          36, L0;
    pull_i          L0, gadget_button;
    push_i          37, L0;
    pull_i          L0, gadget_checkbox;
    push_i          38, L0;
    pull_i          L0, gadget_cycle;
    push_i          39, L0;
    pull_i          L0, gadget_string;
    push_i          40, L0;
    pull_i          L0, gadget_box;
 push_i   41, L0;
 pull_i   L0, gadget_progress_bar;
    push_i          42, L0;
    pull_i          L0, gadget_event;
    push_i          43, L0;
    pull_i          L0, gadget_get_x2y2;
    push_i          44, L0;
    pull_i          L0, gadget_checkbox_change;
    push_i          45, L0;
    pull_i          L0, gadget_string_change;
    push_i          46, L0;
    pull_i          L0, gadget_box_change;
 push_i   47, L0;
 pull_i   L0, gadget_progress_bar_change;
 
    push_i          48, L0;
    pull_i          L0, sound_play_wav;
    push_i          49, L0;
    pull_i          L0, sound_stop_channel;
    push_i          50, L0;
    pull_i          L0, sound_play_music;
    push_i          51, L0;
    pull_i          L0, sound_stop_music;
    push_i   52, L0;
    pull_i   L0, rs232_open_comport;
    push_i   53, L0;
    pull_i   L0, rs232_poll_comport;
    push_i   54, L0;
    pull_i   L0, rs232_send_byte;
    push_i   55, L0;
    pull_i   L0, rs232_send_buf;
    push_i   56, L0;
    pull_i   L0, rs232_close_comport;
    push_i          57, L0;
    pull_i          L0, screennum;
    push_i          58, L0;
    pull_i          L0, width;
    push_i          59, L0;
    pull_i          L0, height;
    push_i          60, L0;
    pull_i          L0, bit;
    push_i          61, L0;
    pull_i          L0, X;
    push_i          62, L0;
    pull_i          L0, Y;
    push_i          63, L0;
    pull_i          L0, X2;
    push_i          64, L0;
    pull_i          L0, Y2;
    push_i          65, L0;
    pull_i          L0, X3;
    push_i          66, L0;
    pull_i          L0, Y3;
    push_i          67, L0;
    pull_i          L0, vectors;
    push_i          68, L0;
    pull_i          L0, steps;
    push_i          69, L0;
    pull_i          L0, radius;
    push_i          70, L0;
    pull_i          L0, Xradius;
    push_i          71, L0;
    pull_i          L0, Yradius;
    push_i          72, L0;
    pull_i          L0, startangle;
    push_i          73, L0;
    pull_i          L0, endangle;
    push_i          74, L0;
    pull_i          L0, r_c;
    push_i          75, L0;
    pull_i          L0, g_c;
    push_i          76, L0;
    pull_i          L0, b_c;
    push_i          77, L0;
    pull_i          L0, r_bg;
    push_i          78, L0;
    pull_i          L0, g_bg;
    push_i          79, L0;
    pull_i          L0, b_bg;
    push_i          80, L0;
    pull_i          L0, alpha;
    push_i          81, L0;
    pull_i          L0, fontwidth;
    push_i          82, L0;
    pull_i          L0, fontheight;
    push_i          83, L0;
    pull_i          L0, fontsize;
    push_i          84, L0;
    pull_i          L0, fontstyle;
    push_i          85, L0;
    pull_i          L0, fontstyle_normal;
    push_i          86, L0;
    pull_i          L0, fontstyle_bold;
    push_i          87, L0;
    pull_i          L0, fontstyle_italic;
    push_i          88, L0;
    pull_i          L0, fontstyle_underline;
    push_i          89, L0;
    pull_i          L0, gadget;
    push_i          90, L0;
    pull_i          L0, gadgets;
    push_i          91, L0;
    pull_i          L0, gadget_status;
    push_i          92, L0;
    pull_i          L0, gadget_int_value;
    push_i          93, L0;
    pull_i          L0, gadget_cycle_entries;
    push_i          94, L0;
    pull_i          L0, gadget_string_str_len;
    push_i          95, L0;
    pull_i          L0, gadget_string_vis_len;
    push_i          96, L0;
    pull_i          L0, VX;
    push_i          97, L0;
    pull_i          L0, VY;
    push_i          98, L0;
    pull_i          L0, text;
    push_i          99, L0;
    pull_i          L0, screentitle;
    push_i          100, L0;
    pull_i          L0, screenicon;
    push_i          101, L0;
    pull_i          L0, picturename;
    push_i          102, L0;
    pull_i          L0, fontname;
    push_i          103, L0;
    pull_i          L0, gadget_string_value;
    push_i          104, L0;
    pull_i          L0, gadget_cycle_text;
    push_i          105, L0;
    pull_i          L0, sound_wav_file;
    push_i          106, L0;
    pull_i          L0, sound_channel;
    push_i          107, L0;
    pull_i          L0, sound_loops;
    push_i          108, L0;
    pull_i          L0, sound_music_file;
 push_i   109, L0;
 pull_i   L0, rs232_comport_number;
 push_i   110, L0;
 pull_i   L0, rs232_baudrate;
 push_i   111, L0;
 pull_i   L0, rs232_buf_size;
 push_i   112, L0;
 pull_i   L0, rs232_byte;
 push_i   113, L0;
 pull_i   L0, rs232_buf;
 
 push_i   114, L0;
 pull_i   L0, gadget_progress_bar_value;
    rts;

lab nanogfx_openscreen;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, screen;
    #setreg_l       L5, _width;
    #setreg_l       L6, _height;
    #setreg_l       L7, _bit;
    #setreg_l       L8, _alpha;
    #setreg_l       L9, ret;
    #setreg_l       L10, comm;
    #setreg_s       S0, _nanogfx_screentitle;
    #setreg_s       S1, _nanogfx_screenicon;
    push_i          0, L0;
    push_i          1, one;
    push_i          2, two;
    stpull_l        _alpha;
    stpull_l        _bit;
    stpull_l        _height;
    stpull_l        _width;
    stpull_s        _nanogfx_screenicon;
    stpull_s        _nanogfx_screentitle;
    stpull_l        screen;
    stpull_l        socket;
    push_i          screennum, comm;
    swrite_b        socket, comm;
    swrite_i        socket, screen;
    push_i          screentitle, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanogfx_screentitle;
    swrite_n        socket, one;
    push_i          screenicon, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanogfx_screenicon;
    swrite_n        socket, one;
    push_i          width, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _width;
    push_i          height, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _height;
    push_i          bit, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _bit;
    push_i          alpha, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _alpha;
    push_i          open_screen, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_closescreen;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, screen;
 #setreg_l       L5, ret;
    #setreg_l       L6, comm;
    push_i          0, L0;
    push_i          1, one;
    push_i          2, two;
    stpull_l        screen;
    stpull_l        socket;
    push_i          screennum, comm;
    swrite_b        socket, comm;
    swrite_i        socket, screen;
    push_i          close_screen, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_clearscreen;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, ret;
    #setreg_l       L5, comm;
    stpull_l        socket;
    push_i          clear_screen, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_updatescreen;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, ret;
    #setreg_l       L5, comm;
    stpull_l        socket;
    push_i          update_screen, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_end;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, ret;
    #setreg_l       L5, comm;
    stpull_l        socket;
    push_i          end, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_shutdown;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, ret;
    #setreg_l       L5, comm;
    stpull_l        socket;
    push_i          shutdown, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_screen;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, screen;
    #setreg_l       L5, comm;
    stpull_l        screen;
    stpull_l        socket;
    push_i          screennum, comm;
    swrite_b        socket, comm;
    swrite_i        socket, screen;
    rts;

lab nanogfx_color;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, r;
    #setreg_l       L5, g;
    #setreg_l       L6, b;
    #setreg_l       L7, comm;
    stpull_l        b;
    stpull_l        g;
    stpull_l        r;
    stpull_l        socket;
    push_i          r_c, comm;
    swrite_b        socket, comm;
    swrite_i        socket, r;
    push_i          g_c, comm;
    swrite_b        socket, comm;
    swrite_i        socket, g;
    push_i          b_c, comm;
    swrite_b        socket, comm;
    swrite_i        socket, b;
    rts;

lab nanogfx_color_bg;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, r;
    #setreg_l       L5, g;
    #setreg_l       L6, b;
    #setreg_l       L7, comm;
    stpull_l        b;
    stpull_l        g;
    stpull_l        r;
    stpull_l        socket;
    push_i          r_bg, comm;
    swrite_b        socket, comm;
    swrite_i        socket, r;
    push_i          g_bg, comm;
    swrite_b        socket, comm;
    swrite_i        socket, g;
    push_i          b_bg, comm;
    swrite_b        socket, comm;
    swrite_i        socket, b;
    rts;

lab nanogfx_alpha;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _alpha;
    #setreg_l       L5, comm;
    stpull_l        _alpha;
    stpull_l        socket;
    push_i          alpha, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _alpha;
    rts;

lab nanogfx_line;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, x;
    #setreg_l       L5, y;
    #setreg_l       L6, x2;
    #setreg_l       L7, y2;
    #setreg_l       L8, ret;
    #setreg_l       L9, comm;
    stpull_l        y2;
    stpull_l        x2;
    stpull_l        y;
    stpull_l        x;
    stpull_l        socket;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          X2, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x2;
    push_i          Y2, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y2;
    push_i          line, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_pixel;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, x;
    #setreg_l       L5, y;
    #setreg_l       L6, ret;
    #setreg_l       L7, comm;
    stpull_l        y;
    stpull_l        x;
    stpull_l        socket;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          pixel, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, x;
    #setreg_l       L5, y;
    #setreg_l       L6, x2;
    #setreg_l       L7, y2;
    #setreg_l       L8, ret;
    #setreg_l       L9, comm;
    #setreg_l       L10, gcomm;

lab nanogfx_rectangle_filled;
    push_i          rectangle_fill, gcomm;
    jmp             nanogfx_rectangle_main;

lab nanogfx_rectangle;
    push_i          rectangle, gcomm;
lab nanogfx_rectangle_main;
    stpull_l        y2;
    stpull_l        x2;
    stpull_l        y;
    stpull_l        x;
    stpull_l        socket;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          X2, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x2;
    push_i          Y2, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y2;
    swrite_b        socket, gcomm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, x;
    #setreg_l       L5, y;
    #setreg_l       L6, _radius;
    #setreg_l       L7, ret;
    #setreg_l       L8, comm;
    #setreg_l       L9, gcomm;

lab nanogfx_circle_filled;
    push_i          circle_fill, gcomm;
    jmp             nanogfx_circle_main;

lab nanogfx_circle;
    push_i          circle, gcomm;
lab nanogfx_circle_main;
    stpull_l        _radius;
    stpull_l        y;
    stpull_l        x;
    stpull_l        socket;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          radius, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _radius;
    swrite_b        socket, gcomm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, x;
    #setreg_l       L5, y;
    #setreg_l       L6, xradius;
    #setreg_l       L7, yradius;
    #setreg_l       L8, ret;
    #setreg_l       L9, comm;
    #setreg_l       L10, gcomm;

lab nanogfx_ellipse_filled;
    push_i          ellipse_fill, gcomm;
    jmp             nanogfx_ellipse_main;

lab nanogfx_ellipse;
    push_i          ellipse, gcomm;
lab nanogfx_ellipse_main;
    stpull_l        yradius;
    stpull_l        xradius;
    stpull_l        y;
    stpull_l        x;
    stpull_l        socket;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          Xradius, comm;
    swrite_b        socket, comm;
    swrite_i        socket, xradius;
    push_i          Yradius, comm;
    swrite_b        socket, comm;
    swrite_i        socket, yradius;
    swrite_b        socket, gcomm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, x;
    #setreg_l       L5, y;
    #setreg_l       L6, _radius;
    #setreg_l       L7, _startangle;
    #setreg_l       L8, _endangle;
    #setreg_l       L9, ret;
    #setreg_l       L10, comm;
    #setreg_l       L11, gcomm;

lab nanogfx_pie_filled;
    push_i          pie_fill, gcomm;
    jmp             nanogfx_pie_main;

lab nanogfx_pie;
    push_i          pie, gcomm;
lab nanogfx_pie_main;
    stpull_l        _endangle;
    stpull_l        _startangle;
    stpull_l        _radius;
    stpull_l        y;
    stpull_l        x;
    stpull_l        socket;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          radius, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _radius;
    push_i          startangle, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _startangle;
    push_i          endangle, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _endangle;
    swrite_b        socket, gcomm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, x;
    #setreg_l       L5, y;
    #setreg_l       L6, x2;
    #setreg_l       L7, y2;
    #setreg_l       L8, x3;
    #setreg_l       L9, y3;
    #setreg_l       L10, ret;
    #setreg_l       L11, comm;
    #setreg_l       L12, gcomm;

lab nanogfx_trigon_filled;
    push_i          trigon_fill, gcomm;
    jmp             nanogfx_trigon_main;

lab nanogfx_trigon;
    push_i          trigon, gcomm;
lab nanogfx_trigon_main;
    stpull_l        y3;
    stpull_l        x3;
    stpull_l        y2;
    stpull_l        x2;
    stpull_l        y;
    stpull_l        x;
    stpull_l        socket;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          X2, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x2;
    push_i          Y2, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y2;
    push_i          X3, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x3;
    push_i          Y3, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y3;
    swrite_b        socket, gcomm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, x;
    #setreg_l       L5, y;
    #setreg_l       L6, _vectors;
    #setreg_l       L7, i;
    #setreg_l       L8, _steps;
    #setreg_l       L9, ret;
    #setreg_l       L10, comm;
    #setreg_l       L11, gcomm;

lab nanogfx_polygon_filled;
    push_i          polygon_fill, gcomm;
    jmp             nanogfx_polygon_main;

lab nanogfx_polygon;
    push_i          polygon, gcomm;
lab nanogfx_polygon_main;
    lint _nanogfx_asize;
    stpull_l        _vectors;
    mul_l           _vectors, two, _vectors;
    pull_l          _vectors, _nanogfx_asize;
    lint _nanogfx_vec_a[_nanogfx_asize];
    move_l          _vectors, i;
    dec_l           i;
    jsr             nanogfx_get_vector_data;
    stpull_l        socket;
    push_i          vectors, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _vectors;
    move_l          null, i;
    jsr             nanogfx_send_vector_data;
    swrite_i        socket, gcomm;
    sread_b         socket, ret;
    stpush_l        ret;
    dealloc         _nanogfx_vec_a;
    rts;

lab nanogfx_bezier;
    lint _nanogfx_asize;
    stpull_l        _steps;
    stpull_l        _vectors;
    mul_l           _vectors, two, _vectors;
    pull_l          _vectors, _nanogfx_asize;
    lint _nanogfx_vec_a[_nanogfx_asize];
    move_l          _vectors, i;
    dec_l           i;
    jsr             nanogfx_get_vector_data;
    stpull_l        socket;
    push_i          steps, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _steps;
    push_i          vectors, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _vectors;
    move_l          null, i;
    jsr             nanogfx_send_vector_data;
    push_i          bezier, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    dealloc         _nanogfx_vec_a;
    rts;
lab nanogfx_get_vector_data;
    stpull_l        y;
    stpull_l        x;
    move_l_a        y, _nanogfx_vec_a, i;
    dec_l           i;
    move_l_a        x, _nanogfx_vec_a, i;
    dec_l           i;
    greq_jmp_l      i, null, nanogfx_get_vector_data;
    rts;
lab nanogfx_send_vector_data;
    move_a_l        _nanogfx_vec_a, i, x;
    inc_l           i;
    move_a_l        _nanogfx_vec_a, i, y;
    inc_l           i;
    push_i          VX, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          VY, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    ls_jmp_l        i, _vectors, nanogfx_send_vector_data;
    rts;

lab nanogfx_loadfont_bmap;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _fontwidth;
    #setreg_l       L5, _fontheight;
    #setreg_l       L6, ret;
    #setreg_l       L7, comm;
    #setreg_s       S0, _nanogfx_fontname;
    push_i          1, one;
    stpull_l        _fontheight;
    stpull_l        _fontwidth;
    stpull_s        _nanogfx_fontname;
    stpull_l        socket;
    push_i          fontname, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanogfx_fontname;
    swrite_n        socket, one;
    push_i          fontwidth, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _fontwidth;
    push_i          fontheight, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _fontheight;
    push_i          loadfont_bmap, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_text_bmap;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, x;
    #setreg_l       L5, y;
    #setreg_l       L6, ret;
    #setreg_l       L7, comm;
    #setreg_s       S0, _nanogfx_text;
    push_i          1, one;
    stpull_s        _nanogfx_text;
    stpull_l        y;
    stpull_l        x;
    stpull_l        socket;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          text, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanogfx_text;
    swrite_n        socket, one;
    push_i          text_bmap, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_loadfont_ttf;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L5, _fontsize;
    #setreg_l       L6, ret;
    #setreg_l       L7, comm;
    #setreg_s       S0, _nanogfx_fontname;
    push_i          1, one;
    stpull_l        _fontsize;
    stpull_s        _nanogfx_fontname;
    stpull_l        socket;
    push_i          fontname, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanogfx_fontname;
    swrite_n        socket, one;
    push_i          fontsize, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _fontsize;
    push_i          loadfont_ttf, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_text_style_ttf;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, style;
    #setreg_l       L5, comm;
    stpull_l        style;
    stpull_l        socket;
    push_i          fontstyle, comm;
    swrite_b        socket, comm;
    swrite_i        socket, style;
    rts;

lab nanogfx_text_ttf;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, x;
    #setreg_l       L5, y;
    #setreg_l       L6, ret;
    #setreg_l       L7, comm;
    #setreg_s       S0, _nanogfx_text;
    push_i          1, one;
    stpull_s        _nanogfx_text;
    stpull_l        y;
    stpull_l        x;
    stpull_l        socket;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          text, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanogfx_text;
    swrite_n        socket, one;
    push_i          text_ttf, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_load_picture;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, x;
    #setreg_l       L5, y;
    #setreg_l       L6, ret;
    #setreg_l       L7, comm;
    #setreg_s       S0, _nanogfx_picture_name;
    push_i          1, one;
    stpull_s        _nanogfx_picture_name;
    stpull_l        y;
    stpull_l        x;
    stpull_l        socket;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          picturename, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanogfx_picture_name;
    swrite_n        socket, one;
    push_i          load_picture, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_getpixel;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, x;
    #setreg_l       L5, y;
    #setreg_l       L6, getpixel_r;
    #setreg_l       L7, getpixel_g;
    #setreg_l       L8, getpixel_b;
    #setreg_l       L9, ret;
    #setreg_l       L10, comm;
    push_i          0, null;
    stpull_l        y;
    stpull_l        x;
    stpull_l        socket;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          getpixel, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    neq_jmp_l       ret, null, nanogfx_getpixel_end;
    sread_i         socket, getpixel_r;
    sread_i         socket, getpixel_g;
    sread_i         socket, getpixel_b;
    stpush_l        getpixel_b;
    stpush_l        getpixel_g;
    stpush_l        getpixel_r;
lab nanogfx_getpixel_end;
    stpush_l        ret;
    rts;

lab nanogfx_getmouse;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, x;
    #setreg_l       L5, y;
    #setreg_l       L6, mousebutton;
    #setreg_l       L7, ret;
    #setreg_l       L8, comm;
    push_i          0, null;
    stpull_l        socket;
    push_i          getmouse, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    neq_jmp_l       ret, null, nanogfx_getmouse_end;
    sread_i         socket, x;
    sread_i         socket, y;
    sread_i         socket, mousebutton;
    stpush_l        mousebutton;
    stpush_l        y;
    stpush_l        x;
lab nanogfx_getmouse_end;
    stpush_l        ret;
    rts;

lab nanogfx_gadgets;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _gadgets;
    #setreg_l       L5, comm;
    stpull_l        _gadgets;
    stpull_l        socket;
    push_i          gadgets, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadgets;
    rts;

lab nanogfx_gadget_color_border_light;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, comm;
    stpull_l        socket;
    push_i          gadget_color_border_light, comm;
    swrite_b        socket, comm;
    rts;

lab nanogfx_gadget_color_border_shadow;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, comm;
    stpull_l        socket;
    push_i          gadget_color_border_shadow, comm;
    swrite_b        socket, comm;
    rts;

lab nanogfx_gadget_color_background_light;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, comm;
    stpull_l        socket;
    push_i          gadget_color_backgr_light, comm;
    swrite_b        socket, comm;
    rts;

lab nanogfx_gadget_color_background_shadow;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, comm;
    stpull_l        socket;
    push_i          gadget_color_backgr_shadow, comm;
    swrite_b        socket, comm;
    rts;

lab nanogfx_gadget_color_text_light;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, comm;
    stpull_l        socket;
    push_i          gadget_color_text_light, comm;
    swrite_b        socket, comm;
    rts;

lab nanogfx_gadget_color_text_shadow;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, comm;
    stpull_l        socket;
    push_i          gadget_color_text_shadow, comm;
    swrite_b        socket, comm;
    rts;

lab nanogfx_set_gadget_button;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _gadget;
    #setreg_l       L5, _gadget_status;
    #setreg_l       L6, x;
    #setreg_l       L7, y;
    #setreg_l       L8, ret;
    #setreg_l       L9, comm;
    #setreg_s       S0, _nanogfx_text;
    push_i          1, one;
    stpull_s        _nanogfx_text;
    stpull_l        _gadget_status;
    stpull_l        y;
    stpull_l        x;
    stpull_l        _gadget;
    stpull_l        socket;
    push_i          gadget, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          gadget_status, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget_status;
    push_i          text, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanogfx_text;
    swrite_n        socket, one;
    push_i          gadget_button, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_set_gadget_progress_bar;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _gadget;
    #setreg_l       L5, _gadget_status;
    #setreg_l       L6, x;
    #setreg_l       L7, y;
    #setreg_l       L8, ret;
    #setreg_l       L9, comm;
 #setreg_l  L10, value;
    #setreg_s       S0, _nanogfx_text;
    push_i          1, one;
 stpull_l  value;
    stpull_s        _nanogfx_text;
    stpull_l        _gadget_status;
    stpull_l        y;
    stpull_l        x;
    stpull_l        _gadget;
    stpull_l        socket;
    push_i          gadget, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          gadget_status, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget_status;
    push_i          text, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanogfx_text;
    swrite_n        socket, one;
 push_i   gadget_progress_bar_value, comm;
 swrite_b  socket, comm;
 swrite_i  socket, value;
    push_i          gadget_progress_bar, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_set_gadget_checkbox;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _gadget;
    #setreg_l       L5, _gadget_status;
    #setreg_l       L6, gadget_value;
    #setreg_l       L7, x;
    #setreg_l       L8, y;
    #setreg_l       L9, ret;
    #setreg_l       L10, comm;
    #setreg_s        S0, _nanogfx_text;
    push_i          1, one;
    stpull_s        _nanogfx_text;
    stpull_l        gadget_value;
    stpull_l        _gadget_status;
    stpull_l        y;
    stpull_l        x;
    stpull_l        _gadget;
    stpull_l        socket;
    push_i          gadget, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          gadget_status, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget_status;
    push_i          gadget_int_value, comm;
    swrite_b        socket, comm;
    swrite_i        socket, gadget_value;
    push_i          text, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanogfx_text;
    swrite_n        socket, one;
    push_i          gadget_checkbox, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_set_gadget_cycle;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _gadget;
    #setreg_l       L5, _gadget_status;
    #setreg_l       L6, gadget_value;
    #setreg_l       L7, gadget_entries;
    #setreg_l       L8, x;
    #setreg_l       L9, y;
    #setreg_l       L10, i;
    #setreg_l       L11, ret;
    #setreg_l       L12, comm;
    #setreg_s       S0, _nanogfx_text;
    lint _nanogfx_asize;
    push_i          0, null;
    push_i          1, one;
    push_i          2, two;
    stpull_l        gadget_entries;
    pull_l          gadget_entries, _nanogfx_asize;
    string _nanogfx_text_a[_nanogfx_asize][512];
    move_l          gadget_entries, i;
    dec_l           i;
lab nanogfx_cycle_get_text_data;
    stpull_s        _nanogfx_text;
    move_s_a        _nanogfx_text, _nanogfx_text_a, i;
    dec_l           i;
    greq_jmp_l      i, null, nanogfx_cycle_get_text_data;
    stpull_l        gadget_value;
    stpull_l        _gadget_status;
    stpull_l        y;
    stpull_l        x;
    stpull_l        _gadget;
    stpull_l        socket;
    push_i          gadget, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          gadget_cycle_entries, comm;
    swrite_b        socket, comm;
    swrite_i        socket, gadget_entries;
    move_l          null, i;
lab nanogfx_cycle_send_text_data;
    move_a_s        _nanogfx_text_a, i, _nanogfx_text;
    push_i          gadget_cycle_text, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanogfx_text;
    swrite_n        socket, one;
    inc_l           i;
    ls_jmp_l        i, gadget_entries, nanogfx_cycle_send_text_data;
    push_i          gadget_status, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget_status;
    push_i          gadget_int_value, comm;
    swrite_b        socket, comm;
    swrite_i        socket, gadget_value;
    push_i          gadget_cycle, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    dealloc         _nanogfx_text_a;
    rts;

lab nanogfx_set_gadget_string;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _gadget;
    #setreg_l       L5, _gadget_status;
    #setreg_l       L6, gadget_string_len;
    #setreg_l       L7, gadget_visible_len;
    #setreg_l       L8, x;
    #setreg_l       L9, y;
    #setreg_l       L10, ret;
    #setreg_l       L11, comm;
    #setreg_s       S0, _nanogfx_text;
    #setreg_s       S1, _nanogfx_string_value;
    push_i          1, one;
    stpull_l        gadget_visible_len;
    stpull_l        gadget_string_len;
    stpull_s        _nanogfx_string_value;
    stpull_s        _nanogfx_text;
    stpull_l        _gadget_status;
    stpull_l        y;
    stpull_l        x;
    stpull_l        _gadget;
    stpull_l        socket;
    push_i          gadget, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          gadget_status, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget_status;
    push_i          text, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanogfx_text;
    swrite_n        socket, one;
    push_i          gadget_string_value, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanogfx_string_value;
    swrite_n        socket, one;
    push_i          gadget_string_str_len, comm;
    swrite_b        socket, comm;
    swrite_i        socket, gadget_string_len;
    push_i          gadget_string_vis_len, comm;
    swrite_b        socket, comm;
    swrite_i        socket, gadget_visible_len;
    push_i          gadget_string, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_set_gadget_box;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _gadget;
    #setreg_l       L5, _gadget_status;
    #setreg_l       L6, x;
    #setreg_l       L7, y;
    #setreg_l       L8, x2;
    #setreg_l       L9, y2;
    #setreg_l       L10, ret;
    #setreg_l       L11, comm;
    push_i          1, one;
    stpull_l        _gadget_status;
    stpull_l        y2;
    stpull_l        x2;
    stpull_l        y;
    stpull_l        x;
    stpull_l        _gadget;
    stpull_l        socket;
    push_i          gadget, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget;
    push_i          X, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x;
    push_i          Y, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y;
    push_i          X2, comm;
    swrite_b        socket, comm;
    swrite_i        socket, x2;
    push_i          Y2, comm;
    swrite_b        socket, comm;
    swrite_i        socket, y2;
    push_i          gadget_status, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget_status;
    push_i          gadget_box, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_change_gadget_checkbox;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _gadget;
    #setreg_l       L5, _gadget_status;
    #setreg_l       L6, _gadget_value;
    #setreg_l       L7, ret;
    #setreg_l       L8, comm;
    stpull_l        _gadget_value;
    stpull_l        _gadget_status;
    stpull_l        _gadget;
    stpull_l        socket;
    push_i          gadget, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget;
    push_i          gadget_status, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget_status;
    push_i          gadget_int_value, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget_value;
    push_i          gadget_checkbox_change, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_change_gadget_string;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _gadget;
    #setreg_l       L5, _gadget_status;
    #setreg_l       L6, ret;
    #setreg_l       L7, comm;
    #setreg_s       S0, _nanogfx_string_value;
    #setreg_s       S1, _nanogfx_text;
    push_i          1, one;
    stpull_s        _nanogfx_string_value;
    stpull_l        _gadget_status;
    stpull_l        _gadget;
    stpull_l        socket;
    push_i          gadget, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget;
    push_i          gadget_status, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget_status;
    push_i          gadget_string_value, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanogfx_text;
    swrite_n        socket, one;
    push_i          gadget_string_change, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_change_gadget_progress_bar;
 #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _gadget;
    #setreg_l       L5, _gadget_status;
    #setreg_l       L6, ret;
    #setreg_l       L7, comm;
 #setreg_l  L8, value;
    push_i          1, one;
    stpull_l  value;
    stpull_l        _gadget_status;
    stpull_l        _gadget;
    stpull_l        socket;
    push_i          gadget, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget;
    push_i          gadget_status, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget_status;
    push_i          gadget_progress_bar_value, comm;
    swrite_b        socket, comm;
    swrite_i  socket, value;
    push_i          gadget_progress_bar_change, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    stpush_l        ret;
    rts;

lab nanogfx_get_gadget_x2y2;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _gadget;
    #setreg_l       L5, x2;
    #setreg_l       L6, y2;
    #setreg_l       L7, ret;
    #setreg_l       L8, comm;
    push_i          0, null;
    stpull_l        _gadget;
    stpull_l        socket;
    push_i          gadget, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _gadget;
    push_i          gadget_get_x2y2, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    neq_jmp_l       ret, null, nanogfx_get_gadget_x2y2_end;
    sread_i         socket, x2;
    sread_i         socket, y2;
    stpush_l        y2;
    stpush_l        x2;
lab nanogfx_get_gadget_x2y2_end;
    stpush_l        ret;
    rts;

lab nanogfx_gadget_event;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _gadget;
    #setreg_l       L5, l_value;
    #setreg_l       L6, gadget_type;
    #setreg_l       L7, gadget_int_type;
    #setreg_l       L8, gadget_string_type;
    #setreg_l       L9, data_end;
    #setreg_l       L10, ret;
    #setreg_l       L11, comm;
    #setreg_d       D0, d_value;
    #setreg_s       S0, _nanogfx_string_value;
    push_i          0, null;
    push_i          gadget, gadget_type;
    push_i          gadget_int_value, gadget_int_type;
    push_i          gadget_string_value, gadget_string_type;
    push_i          end, data_end;
    push_i          0, l_value;
    push_d          0.0, d_value;
    push_s          "", _nanogfx_string_value;
    stpull_l        socket;
    push_i          gadget_event, comm;
    swrite_b        socket, comm;
    sread_b         socket, ret;
    neq_jmp_l       ret, null, nanogfx_gadget_event_end;
lab nanogfx_gadget_event_read;
    sread_b         socket, ret;
    eq_jsr_l        ret, gadget_type, nanogfx_gadget_event_gadget;
    eq_jsr_l        ret, gadget_int_type, nanogfx_gadget_event_int_value;
    eq_jsr_l        ret, gadget_string_type, nanogfx_gadget_event_string_value;
    neq_jmp_l       ret, data_end, nanogfx_gadget_event_read;
    stpush_s        _nanogfx_string_value;
    stpush_d        d_value;
    stpush_l        l_value;
    stpush_l        _gadget;
    push_i          0, ret;
    jmp             nanogfx_gadget_event_end;
lab nanogfx_gadget_event_gadget;
    sread_i         socket, _gadget;
    rts;
lab nanogfx_gadget_event_int_value;
    sread_i         socket, l_value;
    rts;
lab nanogfx_gadget_event_string_value;
    sread_ls        socket, _nanogfx_string_value;
    rts;
lab nanogfx_gadget_event_end;
    stpush_l        ret;
    rts;

lab nanosfx_play_wav;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _channel;
    #setreg_l       L5, _loops;
    #setreg_l       L6, comm;
    #setreg_s       S0, _nanosfx_wavname;
    push_i          1, one;
    stpull_l        _loops;
    stpull_l        _channel;
    stpull_s        _nanosfx_wavname;
    stpull_l        socket;
    push_i          sound_wav_file, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanosfx_wavname;
    swrite_n        socket, one;
    push_i          sound_channel, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _channel;
    push_i          sound_loops, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _loops;
    push_i          sound_play_wav, comm;
    swrite_b        socket, comm;
    rts;

lab nanosfx_stop_channel;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _channel;
    #setreg_l       L5, _loops;
    #setreg_l       L6, comm;
    stpull_l        _channel;
    stpull_l        socket;
    push_i          sound_channel, comm;
    swrite_b        socket, comm;
    swrite_i        socket, _channel;
    push_i          sound_stop_channel, comm;
    swrite_b        socket, comm;
    rts;

lab nanosfx_play_music;
    #unsetreg_all_l;
    #unsetreg_all_s;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _channel;
    #setreg_l       L5, _loops;
    #setreg_l       L6, comm;
    #setreg_s       S0, _nanosfx_musicname;
    push_i          1, one;
    stpull_s        _nanosfx_musicname;
    stpull_l        socket;
    push_i          sound_music_file, comm;
    swrite_b        socket, comm;
    swrite_s        socket, _nanosfx_musicname;
    swrite_n        socket, one;
    push_i          sound_play_music, comm;
    swrite_b        socket, comm;
    rts;

lab nanosfx_stop_music;
    #unsetreg_all_l;
    #setreg_l       L0, null;
    #setreg_l       L1, one;
    #setreg_l       L2, two;
    #setreg_l       L3, socket;
    #setreg_l       L4, _channel;
    #setreg_l       L5, _loops;
    #setreg_l       L6, comm;
    stpull_l        socket;
    push_i          sound_stop_music, comm;
    swrite_b        socket, comm;
    rts;

lab rs232_open_comport;
 #unsetreg_all_l;
 #setreg_l  L0, socket;
 #setreg_l  L1, comport;
 #setreg_l  L2, baudrate;
 #setreg_l  L3, comm;
 #setreg_l  L4, ret;
 stpull_l  baudrate;
 stpull_l  comport;
 stpull_l  socket;
 push_i   rs232_baudrate, comm;
 swrite_b  socket, comm;
 swrite_i  socket, baudrate;
 push_i   rs232_comport_number, comm;
 swrite_b  socket, comm;
 swrite_i  socket, comport;
 push_i   rs232_open_comport, comm;
 swrite_b  socket, comm;
 sread_b   socket, ret;
 stpush_l  ret;
 rts;

lab rs232_poll_comport;
 #unsetreg_all_l;
 #setreg_l  L0, socket;
 #setreg_l  L1, comport;
 #setreg_l  L2, buf_addr;
 #setreg_l  L3, size;
 #setreg_l  L4, i;
 #setreg_l  L5, ret;
 #setreg_l  L6, null;
 #setreg_l  L7, one;
 #setreg_l  L8, buf;
 #setreg_l  L9, comm;
 #setreg_l  L10, readsize;
 push_i   0, null;
 push_i   1, one;
 push_i   0, i;
 stpull_l  size;
 stpull_l  buf_addr;
 stpull_l  comport;
 stpull_l  socket;
 int buf_size;
 pull_i   size, buf_size;
 byte _rs232_buf[buf_size];
 pointer   buf_addr, _rs232_buf, rs232_poll_comport_pointer;
 push_i   rs232_comport_number, comm;
 swrite_b  socket, comm;
 swrite_i  socket, comport;
 push_i   rs232_buf_size, comm;
 swrite_b  socket, comm;
 swrite_i  socket, size;
 push_i   rs232_poll_comport, comm;
 swrite_b  socket, comm;
 sread_i   socket, readsize;
 gr_jmp_l  readsize, null, rs232_poll_comport_return_data;
 eq_jmp_l  readsize, null, rs232_poll_comport_end;
lab rs232_poll_comport_return_data;
 sread_b   socket, buf;
lab rs232_poll_comport_pointer;
 move_b_a  buf, _rs232_buf, i;
 inc_l   i;
 ls_jmp_l  i, readsize, rs232_poll_comport_return_data;
lab rs232_poll_comport_end;
 dealloc   _rs232_buf;
 stpush_l  readsize;
 rts;

lab rs232_send_byte;
 #unsetreg_all_l;
 #setreg_l  L0, socket;
 #setreg_l  L1, comport;
 #setreg_l  L2, send_byte;
 #setreg_l  L3, comm;
 #setreg_l  L4, ret;
 stpull_l  send_byte;
 stpull_l  comport;
 stpull_l  socket;
 push_i   rs232_comport_number, comm;
 swrite_b  socket, comm;
 swrite_i  socket, comport;
 push_i   rs232_byte, comm;
 swrite_b  socket, comm; 
 swrite_b  socket, send_byte;
 push_i   rs232_send_byte, comm;
 swrite_b  socket, comm;
 sread_b   socket, ret;
 stpush_l  ret;
 rts;

lab rs232_send_buf;
 #unsetreg_all_l;
 #setreg_l  L0, socket;
 #setreg_l  L1, comport;
 #setreg_l  L2, buf_addr;
 #setreg_l  L3, size;
 #setreg_l  L4, i;
 #setreg_l  L5, ret;
 #setreg_l  L6, null;
 #setreg_l  L7, one;
 #setreg_l  L8, buf;
 #setreg_l  L9, comm;
 push_i   0, null;
 push_i   1, one;
 push_i   0, i;
 stpull_l  size;
 stpull_l  buf_addr;
 stpull_l  comport;
 stpull_l  socket;
 int buf_size;
 pull_i   size, buf_size;
 byte _rs232_buf[buf_size];
 push_i   rs232_comport_number, comm;
 swrite_b  socket, comm;
 swrite_i  socket, comport;
 push_i   rs232_buf_size, comm;
 swrite_b  socket, comm;
 swrite_i  socket, size;
 push_i   rs232_buf, comm;
 swrite_b  socket, comm;
 pointer   buf_addr, _rs232_buf, rs232_send_buf_send_data;
lab rs232_send_buf_send_data;
 move_a_b  _rs232_buf, i, buf;
 swrite_b  socket, buf;
 inc_l   i;
 ls_jmp_l  i, size, rs232_send_buf_send_data;
 push_i   rs232_send_buf, comm;
 swrite_b  socket, comm;
 sread_b   socket, ret;
 stpush_l  ret;
 rts;

lab rs232_close_comport;
 #unsetreg_all_l;
 #setreg_l  L0, socket;
 #setreg_l  L1, comport;
 #setreg_l  L2, comm;
 #setreg_l  L3, ret;
 stpull_l  comport;
 stpull_l  socket;
 push_i   rs232_comport_number, comm;
 swrite_b  socket, comm;
 swrite_i  socket, comport;
 push_i   rs232_close_comport, comm;
 swrite_b  socket, comm;
 sread_b   socket, ret;
 stpush_l  ret;
 rts;
