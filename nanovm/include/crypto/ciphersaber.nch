//  $VER: ciphersaber.nch 1.0 (11.11.12)
//  ciphersaber encryption library
//
//  needed: include "error.nch" in the main program!

func ciphersaber_run (string input_filename[256], string output_filename[256], int action, string password[247], int async)
    #include <threads.nch>

//  async = 0 => wait till run is finished
//  async = 1 => don't wait, return = asynchron run


    int thread; int thread_state;
    
    int one = 1; int two = 2;
    int f;
    
    threadcreate (thread, ciphersaber);
    
    threadsync (thread);
     
    threadpush (thread, password);
    threadpush (thread, action);
    threadpush (thread, output_filename);
    threadpush (thread, input_filename);
    
    threadpushsync (thread);
    
    f = async == one;
    if f;
        goto ciphersaber_run_end;
    endif;
    
lab ciphersaber_run_wait;
    waitsec (one);
     
    threadstate (thread, thread_state);
    f = thread_state == thread_running;
    if f; goto ciphersaber_run_wait; endif;
    
lab ciphersaber_run_end;
    return (thread);
funcend


func ciphersaber (#sync, string Pinput_filename[256], string Poutput_filename[256], int Paction, string Ppassword[247])
//  action: 1 = encrypt, 2 = decrypt
//  returns 0 = ok, 1 = error

    #include <file.nch>

    int Pin_file = -1; int Pout_file = -1; int Perror; int Pkey_len; int Pkeyset_repeat = 32;
    int Pencrypt = 1; int Pdecrypt = 2; int Pten = 10;
    int Pf;
    int Pret = 0;
    int Pi; int Pj; int Pk; byte Pv; int Pn; byte Pstatei; byte Pkeyi; int Pkeyind;
    int Prandstart; double Prandom; double Pmaxrandom = 255.0; byte Prandomb;
    byte Ps1; byte Ps2; 
    
    byte Pina[1]; byte Pouta[1];
    byte Pin; byte Pout;
    int Pnull = 0; int Pone = 1;

//  file error handling = on
    _err_file = 1;
    
    byte Pkey[256]; byte Pstate[256]; byte Pinit_vect[10];
    
    string Pread[2] = "r"; string Pwrite[2] = "w";
    string Pch[2];
    
    strlen (Ppassword, Pkey_len);
    Pkey_len = --;
    
    Pi = 0;
    for;
        part2string (Ppassword, Pi, Pch);
        asc (Pch, Pv);
    
        pvar2array (Pv, Pkey, Pi);
    
        Pi = ++;
        Pf = Pi <= Pkey_len;
    next Pf;
        
    Pkey_len = ++;
    
    srand (Prandstart);
    
    fopen (Pin_file, Pinput_filename, Pread);
    @file_error ();
    get (Perror);
    
    Pf = Perror != err_file_ok;
    if Pf;
        Pret = 1;
        goto ciphersaber_end;
    endif;
    
    fopen (Pout_file, Poutput_filename, Pwrite);
    @file_error ();
    get (Perror);
    
    Pf = Perror != err_file_ok;
    if Pf;
        Pret = 1;
        goto ciphersaber_end;
    endif;
        
    Pf = Paction == Pdecrypt;
    if Pf;
        pfreadab (Pin_file, Pinit_vect, Pten);
        @file_error ();
        get (Perror);
    
        Pf = Perror != err_file_ok;
        if Pf;
            Pret = 1;
            goto ciphersaber_end;
        endif;
    
        Pj = Pkey_len; Pi = 0;
        for;
            parray2var (Pinit_vect, Pi, Pv);
            pvar2array (Pv, Pkey, Pj);
        
            Pj = ++;
            Pi = ++;
            Pf = Pi < Pten;
        next Pf;      
    else;
        Pj = Pkey_len; Pi = 0;
        for;
            rand (Prandom);
            Prandom = Prandom * Pmaxrandom;
            2int (Prandom, Prandomb);
            
            pvar2array (Prandomb, Pkey, Pj);
        
            fwrite (Pout_file, Prandomb);
            @file_error ();
            get (Perror);
    
            Pf = Perror != err_file_ok;
            if Pf;
                Pret = 1;
                goto ciphersaber_end;
            endif;
        
            Pj = ++;
            Pi = ++;
            Pf = Pi < Pten;
        next Pf;
    endif;
    
    Pkey_len = Pkey_len + Pten;
    
    Pi = 0;
    for;
        parray2var (Pkey, Pi, Pv);
        
        Pi = ++;
        Pf = Pi <= Pkey_len;
    next Pf;
    
    
 // setup state array (don't remove nested code flag, it's needed there!!!)
      
    Pv = 0;
    for;
        #NESTED_CODE_OFF;
        pvar2array (Pv, Pstate, Pv);
    
        Pv = ++;
        Pf = Pv <= 255;
    next Pf;
    
    Pk = 1; Pj = 0;
    for;
        #NESTED_CODE_OFF;
        Pi = 0;
        for;
            #NESTED_CODE_OFF;
            parray2var (Pstate, Pi, Pstatei);
        
            Pkeyind = Pi % Pkey_len;
            parray2var (Pkey, Pkeyind, Pkeyi);
        
            Pj = Pj + Pstatei + Pkeyi % 256;
        
            parray2var (Pstate, Pi, Ps1);
            parray2var (Pstate, Pj, Ps2);
        
            pvar2array (Ps1, Pstate, Pj);
            pvar2array (Ps2, Pstate, Pi);
            
            Pi = ++;
            Pf = Pi <= 255;
        next Pf;
        
        Pk = ++;
        Pf = Pk <= Pkeyset_repeat;
    next Pf;
    
    
//  encrypt / decrypt data
    
    Pi = 0; Pj = 0;
    
lab ciphersaber_loop;
    pfreadab (Pin_file, Pina, Pone); 
    @file_error ();
    get (Perror);
    
    Pf = Perror != err_file_ok;
    if Pf;
        Pret = 1;
        goto ciphersaber_end;
    endif;
    
    parray2var (Pina, Pnull, Pin);
    
    Pi = Pi + 1 % 256;
    
    parray2var (Pstate, Pi, Ps1);
    Pj = Pj + Ps1 % 256;
    
    parray2var (Pstate, Pi, Ps1);
    parray2var (Pstate, Pj, Ps2);
        
    pvar2array (Ps1, Pstate, Pj);
    pvar2array (Ps2, Pstate, Pi);
        
    Pn = Ps1 + Ps2 % 256;
     
    parray2var (Pstate, Pn, Ps1);
    Pout = Pin ^ Ps1;
    
    pvar2array (Pout, Pouta, Pnull);
    
    pfwriteab (Pout_file, Pouta, Pone);
    @file_error ();
    get (Perror);
    
    Pf = Perror != err_file_ok;
    if Pf;
        Pret = 1;
        goto ciphersaber_end;
    endif;
    
    goto ciphersaber_loop;

lab ciphersaber_end;
    Pf = Pin_file >= Pnull;
    if Pf;
        fclose (Pin_file);
    endif;
    
    Pf = Pout_file >= Pnull;
    if Pf;
        fclose (Pout_file);
    endif;

    exit Pret;
funcend
