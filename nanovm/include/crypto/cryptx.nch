//  $VER: cryptx.nch 1.0 (13.07.13)
//  cryptx encryption library
//
//  needed: include "error.nch" in the main program!

func ciphersaber_run (string input_filename[256], string output_filename[256], int action, string password[257], int async)
    #include <threads.nch>

//  async = 0 => wait till run is finished
//  async = 1 => don't wait, return = asynchron run


    int thread; int thread_state;
    
    int one = 1; int two = 2;
    int f;
    
    threadcreate (thread, cryptx);
    
    threadsync (thread);
     
    threadpush (thread, password);
    threadpush (thread, action);
    threadpush (thread, output_filename);
    threadpush (thread, input_filename);
    
    threadpushsync (thread);
    
    f = async == one;
    if f;
        goto ciphersaber_run_end;
    endif;
    
lab ciphersaber_run_wait;
    waitsec (one);
     
    threadstate (thread, thread_state);
    f = thread_state == thread_running;
    if f; goto ciphersaber_run_wait; endif;
    
lab ciphersaber_run_end;
    return (thread);
funcend


func cryptx (#sync, string Pinput_filename[256], string Poutput_filename[256], int Paction, string Ppassword[257])
//  action: 1 = encrypt, 2 = decrypt
//  returns 0 = ok, 1 = error

    #include <file.nch>

	string Pspace[2] = " ";
	string Pchar[2];
	byte Pcharcode;
	
	int Pstartrand[128];
	int Pstartrand_max;
	
	int Pi; int Pj; int Ppossr; int Ppasswlen; int Pmod;
	int Pf; int Px; int Py
	
	strlen (Ppassword, Ppasswlen);
	Pmod = Ppasswlen % 2;
	
	Pf = mod != 0;
	if Pf;
		Pi = Ppasswlen - 1;
	
		for;
			string2part (Pspace, Ppassword, i);
			
			Pi = ++;
			Px = 2 - Pmod - 1;
			Py = Ppasswlen + Px;
			Pf = Pi <= Py;
		next Pf;
	endif;
	
	Pstartrand_max = Ppasswlen / 2 - 1;
	Ppossr = 0;
	Pi = 0;
	for;
		Px = 0; Py = 0;
		Pj = Ppossr;
		for;
			part2string (Ppassword, j, Pchar);
		
			asc (Pchar, Pcharcode);
			@move_byte2intp (Pcharcode, Py, Px);
			get (Px);
		
			Pj = ++;
			Pf = Pj <= Ppossr + 1;
		next Pf;
		possr = possr + 2;
		
		Pi = ++;
		Pf = Pi <= Pstartrand_max;
	next Pf;
			
//	zero Passwd	
	
	