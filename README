ABOUT
=====

This is Nano VM, a virtual machine.
Nano has a full 64 bit CPU core with registers for 64 bit integer, double and strings.
Programs for the VM can be written in assembly or my own high level language N.
Also inline assembly can be used from the N code.

The virtual machine supports multi threading and has a own virtual memory management
for array variables.

Execution can be speeded up by the JIT compiler (AsmJit library).
Currently only X86 CPUs are supported (32 and 64 bit).

Nano VM programs can run on Android, Linux and Windows without the need to change code
for a OS. All OS dependent stuff is done by the VM. So Nano VM programs are independent
and can run on all OS which are supported by the VM.

Nano VM features:
- 64 bit CPU with lots of registers
- stack for function call arguments
- multi threading
- virtual memory manager for array variables
- JIT compiler
- file I/O
- TCP/IP sockets
- rights management
- virtual file system (own work directory)
- "hyperspace" data sharing between virtual machines
- "memory protection" in debugging mode
- assembler
- expansions with DLL/shared libraries possible
  stack and array variables can be accessed from library
- N compiler (high level language)


Hello world!
============

This is a simple "Hello world!" program written in N:

func main ()
    int n = 1; int ret = 0; int x;

    print "Hello world!";
    printn n;

    x = 2 * 2 << 2; x = ++;
    print x;
    printn n;

    exit ret;
funcend

It prints out:

Hello world!
65


===========================================================================================
NEWS
===========================================================================================

Nano VM (3.4.3-5)
-----------------

See ChangeLog: PULL opcodes added to the JIT-compiler.
New: sub functions in N. Now it's possible to write "private" sub functions.
Here is an example:

//  subfunc.nanoc - sub functions example
//
//  Sub functions are "private functions" inside functions.
//  Here is an example program.
//  Inside a sub functions name there must be always the ~ char!
//
//  I did implement this in N with minimal code.
//
//  Take a look at the assembly output of the N compiler, file subfunc.na.

func main ()
    int null = 0; int one = 1;

    int x = 23; int y = 42; int z;

    @multiply (x, y);
    get (z);

    print z; printn one;
    exit null;
funcend

func multiply (int x, int y)
    int one = 1;
    int z;

    multiply~message ();

    @multiply~do (x, y);
    get (z);
    return (z);

//  sub functions of multiply
//  ~ in name is needed to mark this as a sub function

func multiply~do (int x, int y)
    int z;

    z = x * y;
    return (z);
funcend
func multiply~message ()
    int one = 1;
    print "multiply...";
    printn one;
funcend
funcend


===========================================================================================

Flow
====

For graphics/sound the Flow server can be used.
Flow is connected over TCP/IP with the Nano VM.
So the VM and Flow can run on different machines/OS as a remote
control of the Nano VM. Or on the same machine over localhost connection.

You can connect the Flow server on your mobile phone with your Nano VM running on the PC.
With this setup you can run CPU intense programs and "take them with you" on your phone.

Flow server features:
- graphics/GUI with SDL
- sound with SDL_mixer
- serial port RS232 access (Linux/Windows)
- Raspberry Pi GPIO access (experimental)



contact: jay-t(at)gmx(dot)net


CREDITS
=======

See AUTHORS!


NEWS
====

I changed the protocol in the Flow library, this actual version is not
backwards compatible with old versions. Don't mix them, or it won't work.
GUI programs have to be recompiled with the new version of "flow.nah"
include file!

Now DLL/shared libraries can be loaded. This makes it possible to expand the
VM. There is a library to access the VM stack and array variables from the
shared library. A little example is included, it shows how to use the stack
and initialize an array.

Now with the Flow GUI/graphics server source code!
See flow directory.
Android version of flow is buildable with Pelyas SDL build environment.
See Flow README file.


COMPILING
=========

To compile Nano VM there are automake build scripts for:
- Android
- Linux
- Raspberry Pi (Raspbian Linux)
- Windows (tested with MinGW gcc compiler)
