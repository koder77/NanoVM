    ston;

lab main;
    lint null@main;
    push_l 0L, L0;
    pull_l L0, null@main;
    lint one@main;
    push_l 1L, L1;
    pull_l L1, one@main;
    lint delay@main;
    push_l 50L, L2;
    pull_l L2, delay@main;
    qint ind@main;
    push_q 0Q, L3;
    pull_q L3, ind@main;
    lint dll@main;
    lint facedet@main;
    lint facedetthread@main;
    lint f@main;
    string dllname@main[256];
    push_s "libopencvfacedet.so", S0;
    pull_s S0, dllname@main;
    string facedetn@main[256];
    push_s "opencv_face_detection", S1;
    pull_s S1, facedetn@main;
    string _cascade[256];
    push_s "/home/stefan/Seafile/nanovm/home/haarcascade_face.xml", S2;
    pull_s S2, _cascade;
    qint _cam;
    push_q 0Q, L4;
    pull_q L4, _cam;
    qint _retval[1];
    qint ret@main;
    qint _retvalptr;
    lopen L5, S0;
    pull_l L5, dll@main;
    lfunc L5, L6, S1;
    pull_l L6, facedet@main;
    getaddress _retval, L7;
    pull_q L7, _retvalptr;
    thread_create L8, facedetect;
    pull_l L8, facedetthread@main;
    thread_sync L8;
    thpush_l L8, L6;
    thpush_l L8, L5;
    thpush_sync L8;

lab loop;
    var_lock _retval;
    push_q ind@main, L9;
    move_a_q _retval, L9, L3;
    pull_q L3, ret@main;
    var_unlock _retval;
    push_q ret@main, L10;
    push_i 1, L3;
    eq_l L10, L3, L11;
    pull_l L11, f@main;
    push_l f@main, L12;
    not_l L12, L11;
    jmp_l L11, else_0;
    push_s "faces detected", S3;
    print_s S3;
    push_l one@main, L11;
    print_n L11;

lab else_0;
    push_l delay@main, L13;
    push_l delay@main, L13;
    wait_t L13;
    jmp loop;
    thread_join ;
    push_l null@main, L2;
    exit L2;

lab facedetect;
    thpull_sync ;
    lint Pdll@facedetect;
    stpull_l L0;
    ppull_l L0, Pdll@facedetect;
    lint Pfunc@facedetect;
    stpull_l L1;
    ppull_l L1, Pfunc@facedetect;
    int Pnull@facedetect;
    push_i 0, L2;
    ppull_i L2, Pnull@facedetect;
    stpush_all_all ;
    push_s _cascade, S0;
    stpush_s S0;
    push_q _cam, L3;
    stpush_l L3;
    push_q _retvalptr, L4;
    stpush_l L4;
    jsr pushtostack;
    lcall L0, L1;
    exit L2;
    rts ;

lab pushtostack;
 rts;
